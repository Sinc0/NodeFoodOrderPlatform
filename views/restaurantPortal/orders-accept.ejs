<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accept Orders</title>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/portalRestaurant.css">
    <link rel="shortcut icon" href="/pics/pizza-slice-single-transparent.png" type="image/x-icon">
    <script>
        var socket = new WebSocket("ws://localhost:65535");

        /*
        function removeOrderDiv(buttonValue)
        {
            document.getElementById("updateOrderWithTime#" + buttonValue).submit();
            //document.getElementById("customerOrder#" + buttonValue).remove();
        }
        */
        
        function orderAccepted(buttonValue, orderId, time)
        {
            socket.send("order:" + orderId + ":accepted:" + "time=" + time);
            //socket.close();
            console.log(buttonValue);
            //document.getElementById("customerOrder#" + buttonValue).remove();
            //setTimeout(removeOrderDiv(buttonValue), 3000);
            document.getElementById("updateOrderWithTime#" + buttonValue).submit();
        }
        

        function orderDeclined(buttonValue, orderId)
        {
            
            socket.send("order:" + orderId + ":declined");
            //socket.close();

            console.log(buttonValue);
            document.getElementById("inputOrderStatus#" + buttonValue).value = "declined";
            document.getElementById("updateOrderWithTime#" + buttonValue).submit();
            
        }

        function orderTime(orderNumber, time)
        {
            document.getElementById("acceptCustomerOrder#" + orderNumber).value = time;
            document.getElementById("inputOrderTime#" + orderNumber).value = time;
        }

        function saveScrollPosition()
        {
            var y = window.scrollY;
            localStorage.setItem("scrollPositionY", y);
        }

        function loadSavedScrollPosition()
        {
            var positionY = localStorage.getItem("scrollPositionY");
            window.scrollTo(0, positionY)
        }

        function refreshPage()
        {
            location.reload()
        }
        
        setInterval(refreshPage, 60000);

        /*
        socket.onopen = function(event) {
        //alert("socket is connected");
        console.log("socket is open");
        socket.close();
        };

        socket.onclose = function(event) {
            console.log("socket is closed");
        }
        */
    </script>

    <script>
        function initMapX(origin, destination) 
        {
            console.log(origin);
            console.log(destination);
            
            var service = new google.maps.DistanceMatrixService;

            var origin = origin;
            var destination = destination;
            //var origin = 'Karlstad, Sweden';
            //var destination = 'Stockholm, Sweden';
            
            var map = new google.maps.Map(document.getElementById('map'), 
            {
                center: {lat: 55.53, lng: 9.4},
                zoom: 10
            });

            service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: 'DRIVING',
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, 
            
            function(response, status) {
                if (status !== 'OK') 
                {
                    alert('Error was: ' + status);
                } 
            
                else 
                {
                    console.log(response);
                    
                    var originList = response.originAddresses;
                    var destinationList = response.destinationAddresses;

                    for (var i = 0; i < originList.length; i++) 
                    {
                        var results = response.rows[i].elements;
                        console.log(results);
                        console.log(results);
                        console.log(results);

                        var originAddress = originList[i];
                        var destinationAddress = destinationList[i];
                        var travelDistance = null;
                        
                        if(results[i].distance != null && results[i].duration != null) 
                        {
                            var travelDistance = results[i].distance.text;
                            var travelETA = results[i].duration.text;
                            var outputDiv = document.getElementById('output');
    
                            //document.getElementById('originAddress').innerHTML = "start: " + originAddress;
                            //document.getElementById('destinationAddress').innerHTML = "end: " + destinationAddress;
                            document.getElementById("originAddress").hidden = true;
                            document.getElementById("destinationAddress").hidden = true;
                            document.getElementById('travelDistance').innerHTML = "distance: " + travelDistance + "";
                            document.getElementById('travelETA').innerHTML = "driving time: " + travelETA + "";
                        }

                        else
                        {
                            document.getElementById('originAddress').hidden = true;
                            document.getElementById('destinationAddress').hidden = true;
                            document.getElementById('travelDistance').hidden = true;
                            document.getElementById('travelETA').innerHTML = "could not calculate";
                        }
                        
                    }
                }
        });
        }
    </script>

    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -33.8688, lng: 151.2195},
            zoom: 13
            });
            
            var input = document.getElementById('searchInput');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
        
            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });
        
            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }
        
                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
            
                var address = '';
                if (place.address_components) {
                    address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }
            
                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            
                // Location details
                for (var i = 0; i < place.address_components.length; i++) {
                    if(place.address_components[i].types[0] == 'postal_code'){
                        document.getElementById('postal_code').innerHTML = place.address_components[i].long_name;
                    }
                    if(place.address_components[i].types[0] == 'country'){
                        document.getElementById('country').innerHTML = place.address_components[i].long_name;
                    }
                }
                document.getElementById('location').innerHTML = place.formatted_address;
                document.getElementById('lat').innerHTML = place.geometry.location.lat();
                document.getElementById('lon').innerHTML = place.geometry.location.lng();
            });
        }
    </script>
    
    <script>
        function googleMapsCalculate()
        {
            document.getElementById("googleMapsCalculate").click();
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCHDajHZ7clx29MBJQ2omXfEprzsRw5n6Y&callback=initMap" async defer></script>
</head>
    <a href="/restaurantPortal"><nav id="NavBar"><p><b>Home</b></p></nav></a>
    
    <!-- map for google maps api -->
    <div hidden id="map"></div>

    <body onload="loadSavedScrollPosition(), googleMapsCalculate()" onscroll="saveScrollPosition()" style="background-color: lightgray;">
        <header id="confirmOrderHeader">
            <h2 id="confirmOrderTitle" style="margin: 0px; margin-top: 25px; margin-bottom: 25px; padding: 0px;">total unconfirmed orders: <%=orders.length %></h2>
            <!-- <p id="confirmOrderPendingOrderInfo">total pending orders: <%=orders.length %></p> -->
        </header>
        
        <% orders = orders.sort((a, b) => b.date - a.date) %>
        
        <% for(var c = orders.length - 1; c >= 0; c--) { %>
            <% if(c == orders.length - 1) { %>
            <div id="customerOrder#<%=c %>" class="customerOrder" data-value="<%=c %>">
                    <div hidden id="inputs" style="text-align: center; margin-bottom: 10px">
                        <button id="googleMapsCalculate" onclick="initMapX('<%=restaurant.address %>', '<%=orders[c].customerAddress %>')">Google Distance Matrix</button>
                    </div>
            <% } else { %>
                <div hidden id="customerOrder#<%=c %>" class="customerOrder" data-value="<%=c %>" style="opacity: 50%;">
            <% } %>
            
            <div style="text-align: center;">
                <form id="updateOrderWithTime#<%=c %>" action="/order-update" method="POST">
                    <input hidden id="inputOrderId#<%=c %>" name="orderId" value='<%=orders[c]._id %>'></input>
                    <input hidden id="inputOrderTime#<%=c %>" name="estimatedTime" value="60"></input>
                    <input hidden id="inputOrderStatus#<%=c %>" name="status" value="confirmed"></input>
                    <button id="declineCustomerOrder#<%=c %>" class="declineCustomerOrder" type="button" onclick="orderDeclined('<%=c %>', '<%= orders[c]._id %>')" style="border-bottom: 1px solid black;">DECLINE</button>
                </form>
            </div>

            <p style="text-align: left; margin-top: 5px;">ordered: <%=orders[c].placedAt %></p>
            <p style="text-align: left;">id: <%=orders[c]._id %></p>
            <p style="text-align: left;">phone: <%=orders[c].customerPhone %></p>
            <p style="text-align: left;">address: <%=orders[c].customerAddress %></p>
            <p style="text-align: left;">total price: <%=orders[c].totalPrice %></p>
            
            <br />
            
            <p><%=orders[c].type %></p>
            <p><%=orders[c].customerName %></p>
            
            <% for(var x = 0; x < orders[c].products.items.length; x++) { %>
                <p><b><%= orders[c].products.items[x].name %> (<%= orders[c].products.items[x].quantity %>)</b></p>
                <% } %>
               
            <% if(orders[c].customerComment !=   null) { %>
                <p><%=orders[c].customerComment %></p>
            <% } %>

            <br />
            
            <div style="text-align: center; margin-top: 5px;">
                <form id="updateOrderWithTime#<%=c %>" action="/order-update" method="POST">
                    <input hidden id="inputOrderId#<%=c %>" name="orderId" value='<%=orders[c]._id %>'></input>
                    <input hidden id="inputOrderTime#<%=c %>" name="estimatedTime" value="60"></input>
                    <input hidden id="inputOrderStatus#<%=c %>" name="status" value="confirmed"></input>
                    <button id="acceptCustomerOrder#<%=c %>" class="acceptCustomerOrder" type="button" value="60" onclick="orderAccepted('<%=c %>', '<%= orders[c]._id %>', value)" style="border-top: 1px solid black;">ACCEPT</button> <!-- onclick = ws data to client, update db, ws data to restaurant -->
                </form>
            </div>
            
            <% if(c == orders.length - 1) { %>
            <!-- <p>from: <%=restaurant.address %></p> -->
            <!-- <p>to: <%=orders[c].customerAddress %></p> -->
            <div id="output" style="margin: 0px; padding: 0px; padding-top: 5px; padding-bottom: 5px; border-top: 1px solid black;">
                <p id="googleMapsEstimationTitle"><b>Google Maps Estimation</b></p>
                <p id="originAddress"></p>
                <p id="destinationAddress"></p>
                <p id="travelDistance"></p>
                <p id="travelETA"></p>
            </div>
            <% } %>

            <div style="text-align: center;">
                <!-- <b style="font-weight: normal;">set time:</b> -->
                <select id="customerOrderSetTime" onchange="orderTime('<%=c %>', this.value)" style="width: 100%; height: 30px; border: none; border-top: 1px solid black; text-align-last: center; font-weight: bold; background-color: #f7f9f9;">
                    <option value="60">60 min</option>
                    <option value="55">55 min</option>
                    <option value="50">50 min</option>
                    <option value="45">45 min</option>
                    <option value="40">40 min</option>
                    <option value="35">35 min</option>
                    <option value="30">30 min</option>
                    <option value="25">25 min</option>
                    <option value="20">20 min</option>
                    <option value="15">15 min</option>
                </select>
            </div>

        </div>
        
        <% } %>
    </body>
</html>